[tool.black]
# Black configuration for BlogSEO v3
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.git
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | _build
  | buck-out
  | build
  | dist
  | cache
  | output
)/
'''

[tool.isort]
# isort configuration for BlogSEO v3
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
split_on_trailing_comma = true
skip_glob = ["venv/*", "cache/*", "output/*"]
known_first_party = ["agents", "orchestrator", "utilities", "config"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

[tool.mypy]
# mypy configuration for BlogSEO v3
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_any_generics = false
ignore_missing_imports = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
check_untyped_defs = true
exclude = [
    "venv",
    "cache",
    "output",
    "tests"
]

[tool.pytest.ini_options]
# pytest configuration for BlogSEO v3
minversion = "6.0"
addopts = """
    -ra
    -q
    --strict-markers
    --cov=.
    --cov-report=term-missing
    --cov-report=html
    --cov-fail-under=70
"""
testpaths = [
    "tests",
]
python_files = [
    "test_*.py",
    "*_test.py"
]
python_classes = [
    "Test*"
]
python_functions = [
    "test_*"
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
# Coverage configuration
source = ["."]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/venv/*",
    "*/cache/*",
    "*/output/*",
    "setup.py",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if False:",
    "pass",
    "except ImportError:",
]

[tool.bandit]
# Bandit security linter configuration
exclude_dirs = ["tests", "venv", "cache", "output"]
skips = ["B101"]  # Skip assert_used test

[tool.pylint.messages_control]
# Pylint configuration
disable = [
    "C0111",  # missing-docstring
    "C0103",  # invalid-name
    "R0903",  # too-few-public-methods
    "R0913",  # too-many-arguments
    "W0212",  # protected-access
    "C0301",  # line-too-long (handled by black)
]

[tool.pylint.format]
max-line-length = 100

[tool.pylint.basic]
good-names = ["i", "j", "k", "e", "ex", "df", "id", "_"]

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "blogseo-v3"
version = "3.0.0"
description = "AI-Powered SEO Content Generation Platform"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "Your Name", email = "your.email@example.com"},
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]
dependencies = [
    "streamlit>=1.46.1",
    "pytrends>=4.9.2",
    "requests>=2.31.0",
    "beautifulsoup4>=4.13.4",
    "pillow>=11.2.1",
    "google-generativeai>=0.3.2",
    "python-dotenv>=1.0.0",
    "tqdm>=4.67.1",
    "pydantic>=2.7.4",
]

[project.optional-dependencies]
dev = [
    "black>=24.4.2",
    "isort>=5.13.2",
    "flake8>=7.0.0",
    "pre-commit>=3.7.1",
    "pytest>=8.2.2",
    "pytest-cov>=5.0.0",
    "mypy>=1.10.0",
    "bandit>=1.7.8",
]

[project.urls]
"Homepage" = "https://github.com/yourusername/blogseo-v3"
"Bug Tracker" = "https://github.com/yourusername/blogseo-v3/issues"
